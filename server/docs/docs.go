// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/change-password": {
            "post": {
                "description": "Меняет пароль по запросу пользователя",
                "produces": [
                    "aplication/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Меняет пароль для пользователя",
                "parameters": [
                    {
                        "description": "Параметры смены пароля",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.LoginInfo"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Проводит авторизацию на сервере и возвращает информацию о пользователе.",
                "produces": [
                    "aplication/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизирует пользователя.",
                "parameters": [
                    {
                        "description": "Параметры аунтификации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.LoginInfo"
                        }
                    }
                }
            }
        },
        "/parameter": {
            "get": {
                "description": "Возвращает массив параметров, предназначеных для использования в шаблонах.",
                "produces": [
                    "aplication/json"
                ],
                "tags": [
                    "parameter"
                ],
                "summary": "Возвращает все параметры для использования в шаблонах.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.Parameter"
                            }
                        }
                    }
                }
            }
        },
        "/parameter/new": {
            "post": {
                "description": "Создаёт параметр.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "parameter"
                ],
                "summary": "Создаёт параметр для редактирования в шаблоне.",
                "parameters": [
                    {
                        "description": "Свойства создаваемого шаблона",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.CreateParameterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/parameter/values": {
            "post": {
                "description": "Возвращает спиоск параметров для указанного шаблона, если шаблон не указан, то возвращает все параметры",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "parameter"
                ],
                "summary": "Возвращает список параметров для указанного шаблона",
                "parameters": [
                    {
                        "description": "Параметры запроса на получения значений параметров",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.GetParameterValuesRequest"
                        }
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "request.CreateParameterRequest": {
            "type": "object",
            "required": [
                "isDefault",
                "name",
                "parameterType"
            ],
            "properties": {
                "isDefault": {
                    "description": "Параметр является стандартным и доступен для всех шаблонов",
                    "type": "boolean"
                },
                "name": {
                    "description": "Имя параметра",
                    "type": "string"
                },
                "parameterType": {
                    "description": "Тип параметра",
                    "type": "string"
                }
            }
        },
        "request.GetParameterValuesRequest": {
            "type": "object",
            "properties": {
                "path": {
                    "description": "Путь для которого запрашиваются значения параметров",
                    "type": "string"
                }
            }
        },
        "request.LoginRequest": {
            "type": "object",
            "required": [
                "isRemember",
                "login",
                "password"
            ],
            "properties": {
                "isRemember": {
                    "description": "Необходимо ли запоминать пользователя",
                    "type": "boolean"
                },
                "login": {
                    "description": "Логин пользователя",
                    "type": "string"
                },
                "password": {
                    "description": "Пароль пользователя",
                    "type": "string"
                }
            }
        },
        "response.LoginInfo": {
            "type": "object",
            "required": [
                "token",
                "username"
            ],
            "properties": {
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.Parameter": {
            "type": "object",
            "required": [
                "defaultValue",
                "id",
                "isDefault",
                "isSystem",
                "name",
                "parameterType"
            ],
            "properties": {
                "defaultValue": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isDefault": {
                    "type": "boolean"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "parameterType": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "keeper cms server",
	Description:      "CMS с сервером на языке программирования GO",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
